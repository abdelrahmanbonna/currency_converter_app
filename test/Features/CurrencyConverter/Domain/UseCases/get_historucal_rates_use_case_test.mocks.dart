// Mocks generated by Mockito 5.4.4 from annotations
// in currency_converter_app/test/Features/CurrencyConverter/Domain/UseCases/get_historucal_rates_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:async/async.dart' as _i2;
import 'package:currency_converter_app/Features/CurrencyConverter/Domain/Entities/convert_rate_entity.dart'
    as _i5;
import 'package:currency_converter_app/Features/CurrencyConverter/Domain/Entities/currency_entity.dart'
    as _i6;
import 'package:currency_converter_app/Features/CurrencyConverter/Domain/Repositories/currency_converter_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CurrencyConverterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyConverterRepository extends _i1.Mock
    implements _i3.CurrencyConverterRepository {
  MockCurrencyConverterRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i5.ConvertRateEntity>> getConvertRates(
          _i5.ConvertRateEntity? info) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConvertRates,
          [info],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.ConvertRateEntity>>.value(
            _FakeResult_0<_i5.ConvertRateEntity>(
          this,
          Invocation.method(
            #getConvertRates,
            [info],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.ConvertRateEntity>>);

  @override
  _i4.Future<_i2.Result<List<_i5.ConvertRateEntity>>> getHistoricalRates(
          _i5.ConvertRateEntity? info) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHistoricalRates,
          [info],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.ConvertRateEntity>>>.value(
            _FakeResult_0<List<_i5.ConvertRateEntity>>(
          this,
          Invocation.method(
            #getHistoricalRates,
            [info],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.ConvertRateEntity>>>);

  @override
  _i4.Future<_i2.Result<List<_i6.CurrencyEntity>>> getCurrencies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrencies,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i6.CurrencyEntity>>>.value(
            _FakeResult_0<List<_i6.CurrencyEntity>>(
          this,
          Invocation.method(
            #getCurrencies,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i6.CurrencyEntity>>>);
}
